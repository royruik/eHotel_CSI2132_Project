Management Sideï¼š

Calculate Total Revenue by Hotel Department

SELECT hc.brand_name, hd.dp_id, SUM(r.price) AS total_revenue
FROM "HotelChain".hotelchain hc
JOIN "HotelDepartments".hotel hd ON hc.brand_id = hd.brand_id
JOIN "HotelDepartments".rooms r ON hd.dp_id = r.dp_id
JOIN "Booking".renting b ON r.room_no = b.room_id
GROUP BY hc.brand_name, hd.dp_id
ORDER BY hd.dp_id

We know the fact that Room 406 at department 20006 has broken amenities.
Find the last employee who handled room 406 in department 20006.

SELECT r.room_no, r.dp_id, r.problems_description
FROM "HotelDepartments".rooms r
INNER JOIN "HotelDepartments".hotel hd ON r.dp_id = hd.dp_id
WHERE hd.dp_id = 20006 AND (r.problems_description IS NOT NULL AND r.problems_description <> '');

SELECT e.employee_id, e.full_name, e.ssn_sin
FROM "Booking".renting rt
JOIN "HotelDepartments".rooms r ON rt.room_id = r.room_no
JOIN "HotelDepartments".hotel hd ON r.dp_id = hd.dp_id
JOIN "Employee".employees e ON rt.employee_id = e.employee_id
WHERE r.room_no = 406 AND hd.dp_id = 20006
ORDER BY rt.check_out_date DESC
LIMIT 1;

Customer Side:

Find rooms that are more expensive than the average price of all rooms at hotel 40007, additionally has sea view.

SELECT r.room_no, r.price
FROM "HotelDepartments".rooms r
WHERE r.dp_id = 40007
  AND r.price > (
    SELECT AVG(price)
    FROM "HotelDepartments".rooms
    WHERE dp_id = 40007
) AND r.has_sea_view = true
ORDER BY r.price, r.room_no;

Looking for a room within a price range of $100 to $200 per night, with a minimum capacity of 2 people, 
and prefers a room with a sea view and air conditioning. 
We will also ensure the room is available for a given date range, say from '2024-03-31' to '2024-04-03'.

SELECT 
    hd.dp_id, 
    hd.dp_address AS HotelAddress, 
    r.room_no, 
    r.price, 
    r.capacity,
    CASE 
        WHEN r.has_sea_view THEN 'Yes' 
        ELSE 'No' 
    END AS SeaView,
    CASE 
        WHEN r.has_air_conditioning THEN 'Yes' 
        ELSE 'No' 
    END AS AirConditioning
FROM "HotelDepartments".hotel hd
JOIN "HotelDepartments".rooms r ON hd.dp_id = r.dp_id
LEFT JOIN "Booking".booking b ON r.room_no = b.room_id AND r.dp_id = b.dp_id
    AND NOT (b.booking_end_date < '2024-03-31' OR b.booking_start_date > '2024-04-03')
WHERE 
    r.price BETWEEN 100 AND 200
    AND r.capacity >= 2
    AND r.has_sea_view = TRUE
    AND r.has_air_conditioning = TRUE
    AND b.booking_id IS NULL
GROUP BY hd.dp_id, r.room_no, r.price, r.capacity, r.has_sea_view, r.has_air_conditioning
HAVING COUNT(b.booking_id) = 0
ORDER BY r.price ASC;


to book: 
INSERT INTO "Booking".booking (
    customer_id, 
    room_id, 
    employee_id, 
    booking_start_date, 
    booking_end_date, 
    dp_id, 
    number_of_guests,
    special_notes
)
VALUES (
    123,         -- Customer ID
    105,           -- Room ID
    2,           -- Employee ID who handles the booking
    '2024-03-31',  -- Booking start date
    '2024-04-03',  -- Booking end date
    10001,         -- Hotel Department ID
    2,              -- Number of guests
    '
	
);

Delete:
DELETE FROM "Booking".booking
WHERE 
    customer_id = 123
    AND room_id = 105
    AND employee_id = 2
    AND booking_start_date = '2024-03-31'
    AND booking_end_date = '2024-04-03'
    AND dp_id = 10001
    AND number_of_guests = 2;


SELECT *
FROM "Booking".archive
WHERE room_id = 105 and dp_id = 10001








Trigger for Preventing Booking Overlaps:
--This trigger will prevent inserting a new booking if the room is already booked for the given date range. 
--This enforces a user-defined constraint that a room cannot be double-booked.

CREATE OR REPLACE FUNCTION prevent_booking_overlap() RETURNS TRIGGER AS $$
DECLARE
    room_already_booked BOOLEAN;
BEGIN
    -- Check if there are any bookings that overlap the date range for the same room
    SELECT EXISTS (
        SELECT 1 FROM "Booking".booking
        WHERE room_id = NEW.room_id
        AND booking_start_date < NEW.booking_end_date
        AND booking_end_date > NEW.booking_start_date
    ) INTO room_already_booked;

    IF room_already_booked THEN
        RAISE EXCEPTION 'Room is already booked for the given dates';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

Trigger for Archiving Deleted Bookings:
--Whenever a booking is deleted, this trigger will archive the record by inserting it into an archive table. 
--This ensures that you maintain a history of all bookings, including those that are no longer active.

CREATE TRIGGER prevent_booking_overlap
BEFORE INSERT ON "Booking".booking
FOR EACH ROW EXECUTE FUNCTION prevent_booking_overlap();

CREATE OR REPLACE FUNCTION archive_deleted_booking() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO "Booking".archive (
        original_action_id,
        action_type,
        customer_id,
        room_id,
        employee_id,
        start_date,
        end_date,
        number_of_guests,
        problem_reported,
        special_notes,
        archive_date
    ) VALUES (
        OLD.booking_id,
        'Booking',
        OLD.customer_id,
        OLD.room_id,
        OLD.employee_id,
        OLD.booking_start_date,
        OLD.booking_end_date,
        OLD.number_of_guests,
        NULL,  -- Assuming you have fields for reporting problems and special notes
        NULL,
        CURRENT_DATE
    );

    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER archive_deleted_booking
AFTER DELETE ON "Booking".booking
FOR EACH ROW EXECUTE FUNCTION archive_deleted_booking();




Index on Customer Registration Date:
Since there might be queries to fetch recent customers or perform operations based on the registration date, indexing this column would speed up such queries.

CREATE INDEX idx_customer_regis_date ON "Customer".customer (regis_date);
Justification: This index will speed up queries that involve searching for customers based on their registration date, especially useful for marketing efforts to target new customers or analyzing customer acquisition trends.

Index on Booking Start and End Date:
Bookings are often queried by their start and end dates to check for room availability, manage reservations, and prepare for guest arrivals and departures.

CREATE INDEX idx_booking_dates ON "Booking".booking (booking_start_date, booking_end_date);
Justification: This composite index will improve the performance of queries checking for booking overlaps, availability within a certain time frame, and reporting. Since both start and end dates are often used together in range queries, a composite index is more efficient than separate indexes.

Index on Room Price:
The room's price is a common search criterion for customers when they choose rooms, and thus an index on this column can make these searches faster.

CREATE INDEX idx_room_price ON "HotelDepartments".rooms (price);
Justification: This index is useful for accelerating queries that involve filtering or ordering rooms based on price, which is a common operation in any hotel booking system.

Views: 

CREATE OR REPLACE VIEW available_rooms_per_area AS
SELECT
    hd.dp_id AS department_id,
    hd.dp_address AS department_address,
    COUNT(r.room_no) AS available_rooms_count
FROM
    "HotelDepartments".hotel hd
LEFT JOIN
    "HotelDepartments".rooms r ON hd.dp_id = r.dp_id
LEFT JOIN
    "Booking".booking b ON r.room_no = b.room_id AND hd.dp_id = b.dp_id AND b.booking_end_date >= CURRENT_DATE
WHERE
    b.booking_id IS NULL OR (b.booking_end_date < CURRENT_DATE)
GROUP BY
    hd.dp_id, hd.dp_address
ORDER BY
    hd.dp_id;



CREATE OR REPLACE VIEW TotalCapacityPerHotel AS
SELECT hd.dp_id, hd.dp_address AS HotelAddress, SUM(r.capacity) AS TotalCapacity
FROM "HotelDepartments".hotel hd
JOIN "HotelDepartments".rooms r ON hd.dp_id = r.dp_id
GROUP BY hd.dp_id, hd.dp_address
ORDER BY hd.dp_id;

Time Stamp:
1- 00:00
2- 01:02
3- 04:36
4- 05:42
5- 06:54
6- 12:07
7- 17:52
8- 19:24




































